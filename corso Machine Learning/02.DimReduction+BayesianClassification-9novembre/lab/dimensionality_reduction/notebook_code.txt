"""
Some plotting functions.
"""

import numpy as np

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import proj3d


plt.ion()


def show_eigenfaces(eigenfaces, size):
    """
    Plots ghostly eigenfaces.
    
    Parameters
    ----------
    eigenfaces: ndarray
        eigenfaces (eigenvectors of face covariance matrix).
    size: tuple
        the size of each face image like (h, w).

    Returns
    -------
    None
    """
    eigf = []
    for f in eigenfaces.T.copy():

        f -= f.min()
        f /= f.max() + np.finfo(float).eps

        eigf.append(np.reshape(f, newshape=size))

    to_show = np.concatenate(eigf, axis=1)

    plt.imshow(to_show)
    plt.title('Eigenfaces')
    #plt.waitforbuttonpress()
    plt.show()


def show_3d_faces_with_class(points, labels):
    """
    Plots 3d data in colorful point (color is class).
    
    Parameters
    ----------
    points: ndarray
        3d points to plot (shape: (n_samples, 3)).
    labels: ndarray
        classes (shape: (n_samples,)).

    Returns
    -------
    None
    """
    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(points[:, 0], points[:, 1], points[:, 2], alpha=0.5, c=labels, s=60)
    plt.show(block=True)

"""
Functions to load data from file.
"""

import numpy as np
import skimage.io as io
from os.path import join, basename, isdir
from glob import glob
from google_drive_downloader import GoogleDriveDownloader


GoogleDriveDownloader.download_file_from_google_drive(file_id='1SpyIe1jwiFV4s5ulinHiW2CfviPN06er',
                                                      dest_path='./att_faces/eigenfaces.zip',
                                                      unzip=True)


def get_faces_dataset(path, train_split=60):
    """
    Loads Olivetti dataset from files.
    
    Parameters
    ----------
    path: str
        the root folder of the Olivetti dataset.
    train_split: int
        the percentage of dataset used for training (default is 60%).

    Returns
    -------
    tuple
        a tuple like (X_train, Y_train, X_test, Y_test)
    """

    cl_folders = sorted([basename(f) for f in glob(join(path, '*')) if isdir(f)])

    X = []
    Y = []
    for cl, cl_f in enumerate(cl_folders):
        img_list = glob(join(path, cl_f, '*.pgm'))

        for i, img_path in enumerate(img_list):
            X.append(io.imread(img_path).ravel())
            Y.append(cl)

    X = np.array(X, dtype=np.float32)
    Y = np.array(Y, dtype=np.float32)

    n_samples = Y.size
    n_train_samples = (n_samples * train_split) // 100

    # shuffle
    tot = np.concatenate((X, np.reshape(Y, newshape=(-1, 1))), axis=-1)

    np.random.seed(30101990)
    np.random.shuffle(tot)
    X = tot[:, :-1]
    Y = tot[:, -1]

    X_train = X[:n_train_samples]
    Y_train = Y[:n_train_samples]

    X_test = X[n_train_samples:]
    Y_test = Y[n_train_samples:]

    return X_train, Y_train, X_test, Y_test

"""
Eigenfaces main script.
"""

#pip install skimage

import numpy as np

import matplotlib.pyplot as plt
#plt.ion()


def eigenfaces(X, n_comp):
    """
    Performs PCA to project faces in a reduced space.

    Parameters
    ----------
    X: ndarray
        faces to project (shape: (n_samples, w*h))
    n_comp: int
        number of principal components

    Returns
    -------
    tuple
        proj_faces: the projected faces shape=(n_samples, n_comp).
        ef: eigenfaces (the principal directions)
    """

    n_samples, dim = X.shape

    # compute mean vector
    X_mean = np.mean(X, axis=0)

    # show mean face
    plt.imshow(np.reshape(X_mean, newshape=(112, 92)))
    plt.title('mean face')
    #plt.waitforbuttonpress()
    plt.show()
    # normalize data (remove mean)
    X_norm = X - X_mean

    # trick (transpose data matrix)
    X_norm = X_norm.T

    # compute covariance
    cov = np.dot(X_norm.T, X_norm)

    # compute (sorted) eigenvectors of the covariance matrixj
    eigval, eigvec = np.linalg.eig(cov)
    idxs = np.argsort(eigval)[::-1]
    eigvec = eigvec[:, idxs]
    eigvec = eigvec[:, 0:n_comp]

    # retrieve original eigenvec
    ef = np.dot(X.T, eigvec)

    # show eigenfaces
    show_eigenfaces(ef, (112, 92))

    # project faces according to the computed directions
    proj_faces = np.dot(X, ef)

    return proj_faces, ef


def main():
    """
    Main function.
    """

    # number of principal components
    n_comp = 10

    # get_data
    X_train, Y_train, X_test, Y_test = get_faces_dataset(path='att_faces')

    proj_train, ef = eigenfaces(X_train, n_comp=n_comp)

    # visualize projections if 3d
    if n_comp == 3:
        show_3d_faces_with_class(proj_train, Y_train)

    # project test data
    test_proj = np.dot(X_test, ef)

    # predict test faces
    predictions = np.zeros_like(Y_test)
    nearest_neighbors = np.zeros_like(Y_test, dtype=np.int32)
    for i in range(0, test_proj.shape[0]):

        cur_test = test_proj[i]

        distances = np.sum(np.square(proj_train - cur_test), axis=1)

        # nearest neighbor classification
        nearest_neighbor = np.argmin(distances)
        nearest_neighbors[i] = nearest_neighbor
        predictions[i] = Y_train[nearest_neighbor]

    print('Error: {}'.format(float(np.sum(predictions != Y_test))/len(predictions)))

    # visualize nearest neighbors
    _, (ax0, ax1) = plt.subplots(1, 2)


    # extract random index
    test_idx = 13

    ax0.imshow(np.reshape(X_test[test_idx], newshape=(112, 92)), cmap='gray')
    ax0.set_title('Test face')
    ax1.imshow(np.reshape(X_train[nearest_neighbors[test_idx]], newshape=(112, 92)), cmap='gray')
    ax1.set_title('Nearest neighbor')

    # plot faces
    #plt.waitforbuttonpress()
    plt.show()


if __name__ == '__main__':
    main()
